# train.py
import os
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from joblib import dump

# Criar pasta de modelos se nÃ£o existir
os.makedirs("models", exist_ok=True)

# ğŸ”¹ Base de dados simples (spam vs ham)
data = {
    "text": [
        "ParabÃ©ns! VocÃª ganhou um prÃªmio, clique aqui!",
        "Oferta imperdÃ­vel, compre agora com desconto.",
        "VocÃª foi selecionado para receber um cartÃ£o grÃ¡tis.",
        "Oi, tudo bem? Vamos almoÃ§ar amanhÃ£?",
        "Confirme sua presenÃ§a na reuniÃ£o de hoje.",
        "NÃ£o esqueÃ§a de comprar pÃ£o na volta para casa.",
        "Seu nÃºmero foi sorteado, ligue jÃ¡!",
        "Esse Ã© um lembrete da sua consulta mÃ©dica amanhÃ£."
    ],
    "label": [
        "spam", "spam", "spam", "ham", "ham", "ham", "spam", "ham"
    ]
}

df = pd.DataFrame(data)

# ğŸ”¹ Dividir dados
X_train, X_test, y_train, y_test = train_test_split(
    df["text"], df["label"], test_size=0.2, random_state=42
)

# ğŸ”¹ Pipeline: TF-IDF + RegressÃ£o LogÃ­stica
pipe = Pipeline([
    ("tfidf", TfidfVectorizer()),
    ("clf", LogisticRegression())
])

# ğŸ”¹ Treinar modelo
pipe.fit(X_train, y_train)

# ğŸ”¹ Salvar modelo treinado
MODEL_PATH = os.path.join("models", "modelo_spam.pkl")
dump(pipe, MODEL_PATH)

print(f"âœ… Modelo treinado e salvo em: {MODEL_PATH}")
